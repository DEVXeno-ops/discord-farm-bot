const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('inventory')
    .setDescription('üì¶ ‡∏î‡∏π‡∏Ç‡∏≠‡∏á‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì'),

  async execute(interaction, dataManager) {
    try {
      const userId = interaction.user.id;

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å dataManager (‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ clone ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)
      const userData = dataManager.getUserData(userId);
      if (!userData) {
        return await interaction.reply({
          content: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
          ephemeral: true,
        });
      }

      // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÉ‡∏´‡πâ‡∏î‡∏π‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏° ‡πÄ‡∏ä‡πà‡∏ô 1,000 ‡πÅ‡∏ó‡∏ô 1000
      const formatNumber = (num) => new Intl.NumberFormat('th-TH').format(num);

      // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ default ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô undefined ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
      const inventory = Number(userData.inventory) || 0;
      const money = Number(userData.money) || 0;
      const plots = Number(userData.plots) || 0;
      const level = Number(userData.level) || 1;
      const xp = Number(userData.xp) || 0;
      const xpForNextLevel = level * 100;

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á Embed ‡πÅ‡∏ö‡∏ö‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
      const embed = new EmbedBuilder()
        .setTitle(`üì¶ ‡∏Ñ‡∏•‡∏±‡∏á‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á ${interaction.user.username}`)
        .setColor('#3498db')
        .addFields(
          { name: 'üåæ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á', value: `${formatNumber(inventory)} ‡∏ä‡∏¥‡πâ‡∏ô`, inline: true },
          { name: 'üí∞ ‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ', value: `${formatNumber(money)} ‡πÄ‡∏á‡∏¥‡∏ô`, inline: true },
          { name: 'üßë‚Äçüåæ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏•‡∏π‡∏Å', value: `${formatNumber(plots)} ‡πÅ‡∏õ‡∏•‡∏á`, inline: true },
          { name: '‚≠ê ‡πÄ‡∏•‡πÄ‡∏ß‡∏•', value: `${formatNumber(level)}`, inline: true },
          { 
            name: 'üîÑ XP', 
            value: `${formatNumber(xp)} / ${formatNumber(xpForNextLevel)} (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏ñ‡∏±‡∏î‡πÑ‡∏õ)`, 
            inline: true 
          }
        )
        .setFooter({ text: '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /inventory' })
        .setTimestamp();

      await interaction.reply({ embeds: [embed], ephemeral: true });
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /inventory:', error);
      if (interaction.replied || interaction.deferred) {
        await interaction.followUp({ content: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á', ephemeral: true });
      } else {
        await interaction.reply({ content: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á', ephemeral: true });
      }
    }
  },
};
