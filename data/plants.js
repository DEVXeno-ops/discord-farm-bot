// commands/plant.js
const { SlashCommandBuilder, ActionRowBuilder, StringSelectMenuBuilder, ComponentType } = require('discord.js');
const plantsData = require('../data/plants');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('plant')
    .setDescription('‡∏õ‡∏•‡∏π‡∏Å‡∏û‡∏∑‡∏ä‡πÉ‡∏ô‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì'),

  async execute(interaction, dataManager) {
    const userId = interaction.user.id;
    const userData = dataManager.getUserData(userId);
    const language = userData.lang || 'th';

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏õ‡∏•‡∏π‡∏Å‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const plantingSlots = userData.plants.filter(p => !p.ready && Date.now() - p.plantedAt < p.growTime).length;
    if (plantingSlots >= userData.plots) {
      return interaction.reply({
        content: '‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏π‡∏Å‡∏û‡∏∑‡∏ä',
        ephemeral: true,
      });
    }

    const selectMenu = new StringSelectMenuBuilder()
      .setCustomId('select-plant')
      .setPlaceholder('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏∑‡∏ä‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏π‡∏Å')
      .addOptions(
        plantsData.map(plant => ({
          label: `${plant.emoji} ${plant.name[language]}`,
          description: `‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏ï: ${plant.growTime / 1000} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`,
          value: plant.id
        }))
      );

    const row = new ActionRowBuilder().addComponents(selectMenu);

    const msg = await interaction.reply({
      content: 'üå± ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏∑‡∏ä‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏π‡∏Å:',
      components: [row],
      ephemeral: true,
      fetchReply: true
    });

    const collector = msg.createMessageComponentCollector({
      componentType: ComponentType.StringSelect,
      time: 15000,
    });

    collector.on('collect', async i => {
      if (i.user.id !== userId) return i.reply({ content: '‚õî ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏õ‡∏∏‡πà‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì!', ephemeral: true });

      const selectedPlant = plantsData.find(p => p.id === i.values[0]);
      userData.plants.push({
        id: selectedPlant.id,
        plantedAt: Date.now(),
        growTime: selectedPlant.growTime,
        ready: false,
      });

      dataManager.updateUserData(userId, userData);

      await i.update({
        content: `‚úÖ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏õ‡∏•‡∏π‡∏Å ${selectedPlant.emoji} **${selectedPlant.name[language]}** ‡πÅ‡∏•‡πâ‡∏ß!`,
        components: []
      });
    });
  },
};
