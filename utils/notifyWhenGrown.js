const plantsData = require('../data/plants');

async function notifyReadyPlants(client, dataManager) {
  const allUsers = dataManager.getAllUsers();
  const now = Date.now();

  for (const userId in allUsers) {
    const userData = allUsers[userId];

    if (!Array.isArray(userData.plants)) continue;

    // ‡πÄ‡∏Å‡πá‡∏ö‡∏û‡∏∑‡∏ä‡∏ó‡∏µ‡πà‡πÇ‡∏ï‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß (harvested = false)
    const readyPlants = [];

    let updated = false;
    userData.plants.forEach(p => {
      if (!p.harvested && now - p.plantedAt >= p.growTime) {
        p.harvested = false;  // ‡∏¢‡πâ‡∏≥‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πá‡∏ö (‡∏ñ‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
        readyPlants.push(p);
        updated = true;
      }
    });

    if (readyPlants.length === 0) {
      // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏û‡∏∑‡∏ä‡πÇ‡∏ï ‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ
      continue;
    }

    if (updated) {
      try {
        dataManager.updateUserData(userId, userData);
      } catch (err) {
        console.error(`Error updating userData for user ${userId}:`, err);
      }
    }

    try {
      const user = await client.users.fetch(userId);
      const list = readyPlants
        .map(p => {
          const plantInfo = plantsData.find(pl => pl.id === p.id);
          if (!plantInfo) return `‚Ä¢ üå± Unknown Plant (${p.id})`;
          return `‚Ä¢ ${plantInfo.emoji} ${plantInfo.name}`;
        })
        .join('\n');

      await user.send(`üåæ ‡∏û‡∏∑‡∏ä‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÇ‡∏ï‡πÅ‡∏•‡πâ‡∏ß! ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß:\n${list}`);
    } catch (error) {
      console.error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° DM ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${userId}:`, error);
      // ‡∏ñ‡πâ‡∏≤ DM ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡πá‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°
    }
  }
}

module.exports = { notifyReadyPlants };
