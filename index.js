require('dotenv').config();
const { Client, GatewayIntentBits, Collection, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const path = require('path');
const dataManager = require('./utils/dataManager');

const client = new Client({ intents: [GatewayIntentBits.Guilds] });
client.commands = new Collection();

const commandsPath = path.join(__dirname, 'commands');
const commandFiles = require('fs').readdirSync(commandsPath).filter(f => f.endsWith('.js'));
for (const file of commandFiles) {
  const command = require(path.join(commandsPath, file));
  client.commands.set(command.data.name, command);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏û‡∏∑‡∏ä‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏Å‡πá‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á (update ready flag)
function checkPlantsReady(plants) {
  const now = Date.now();
  plants.forEach(plant => {
    if (!plant.ready && now - plant.plantedAt >= plant.growTime) {
      plant.ready = true;
    }
  });
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô cooldown ‡∏õ‡∏•‡∏π‡∏Å‡∏û‡∏∑‡∏ä (ms)
const PLANT_COOLDOWN = 15000; // 15 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

client.once('ready', () => {
  console.log(`Bot logged in as ${client.user.tag}`);
});

client.on('interactionCreate', async interaction => {
  if (interaction.isChatInputCommand()) {
    const command = client.commands.get(interaction.commandName);
    if (!command) return;

    try {
      await command.execute(interaction, dataManager);
    } catch (error) {
      console.error(error);
      if (interaction.replied || interaction.deferred) {
        await interaction.followUp({ content: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á', ephemeral: true });
      } else {
        await interaction.reply({ content: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á', ephemeral: true });
      }
    }
  }

  if (interaction.isButton()) {
    const userId = interaction.user.id;
    const userData = dataManager.getUserData(userId);
    checkPlantsReady(userData.plants);
    const now = Date.now();

    try {
      switch (interaction.customId) {
        case 'plant':
          if (userData.plants.length >= userData.plots) {
            return interaction.reply({ content: `‚ùå ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏π‡∏Å‡πÄ‡∏ï‡πá‡∏° (${userData.plots} ‡πÅ‡∏õ‡∏•‡∏á)`, ephemeral: true });
          }
          if (now - userData.lastPlantTime < PLANT_COOLDOWN) {
            const remain = Math.ceil((PLANT_COOLDOWN - (now - userData.lastPlantTime)) / 1000);
            return interaction.reply({ content: `‚è≥ ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏≠‡∏µ‡∏Å ${remain} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏•‡∏π‡∏Å`, ephemeral: true });
          }
          const growTime = 30000 / userData.upgradeLevel;
          userData.plants.push({ plantedAt: now, growTime, ready: false });
          userData.lastPlantTime = now;
          dataManager.updateUserData(userId, userData);
          return interaction.reply({ content: `üå± ‡∏õ‡∏•‡∏π‡∏Å‡∏û‡∏∑‡∏ä‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢! ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ ${Math.floor(growTime / 1000)} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏à‡∏ô‡πÇ‡∏ï`, ephemeral: true });

        case 'harvest':
          {
            const readyPlants = userData.plants.filter(p => p.ready);
            if (readyPlants.length === 0) return interaction.reply({ content: '‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏û‡∏∑‡∏ä‡πÇ‡∏ï‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß', ephemeral: true });

            const harvestCount = readyPlants.length;
            userData.inventory += harvestCount;
            userData.plants = userData.plants.filter(p => !p.ready);
            userData.xp += harvestCount * 10;
            userData.money += harvestCount * 20;

            // Level up check
            if (userData.xp >= userData.level * 100) {
              userData.level++;
              userData.xp = 0;
            }
            dataManager.updateUserData(userId, userData);

            return interaction.reply({
              content: `üåæ ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß ${harvestCount} ‡∏ï‡πâ‡∏ô\nüí∞ ‡πÑ‡∏î‡πâ‡πÄ‡∏á‡∏¥‡∏ô ${harvestCount * 20}\n‚≠ê ‡πÑ‡∏î‡πâ XP ${harvestCount * 10}`,
              ephemeral: true
            });
          }

        case 'upgrade':
          {
            const cost = userData.upgradeLevel * 100;
            if (userData.money < cost) return interaction.reply({ content: `‚ùå ‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠ ‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ ${cost} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç`, ephemeral: true });
            userData.money -= cost;
            userData.upgradeLevel++;
            dataManager.updateUserData(userId, userData);
            return interaction.reply({ content: `üìà ‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î‡∏ü‡∏≤‡∏£‡πå‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö ${userData.upgradeLevel}`, ephemeral: true });
          }

        case 'buyplot':
          {
            const cost = 50;
            if (userData.money < cost) return interaction.reply({ content: `‚ùå ‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠ ‡∏ã‡∏∑‡πâ‡∏≠‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ ${cost} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç`, ephemeral: true });
            userData.money -= cost;
            userData.plots++;
            dataManager.updateUserData(userId, userData);
            return interaction.reply({ content: `üõí ‡∏ã‡∏∑‡πâ‡∏≠‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏° 1 ‡πÅ‡∏õ‡∏•‡∏á (‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ ${userData.plots} ‡πÅ‡∏õ‡∏•‡∏á)`, ephemeral: true });
          }

        case 'refresh':
          {
            const farmCmd = client.commands.get('farm');
            if (!farmCmd) return interaction.reply({ content: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /farm', ephemeral: true });
            return farmCmd.execute(interaction, dataManager);
          }

        default:
          return interaction.reply({ content: '‚ùå ‡∏õ‡∏∏‡πà‡∏°‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å', ephemeral: true });
      }
    } catch (error) {
      console.error(error);
      return interaction.reply({ content: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', ephemeral: true });
    }
  }
});

client.login(process.env.TOKEN);
